devtools::install_github("eddelbuettel/rbenchmark")
library('devtools')
install.packages('devtools')
devtools::install_github("eddelbuettel/rbenchmark")
library('devtools')
install_github("eddelbuettel/rbenchmark")
install.packages("devtools")
install_github("eddelbuettel/rbenchmark")
install.packages("C:/Users/rwaldhei/Downloads/rbenchmark_1.0.0.tar.gz", repos = NULL, type = "source")
library('rbenchmark')
library(shiny); runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
install.packages("rlang")
library(shiny); runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
library('rbenchmark')
install.packages("rlang")
library(shiny); runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
sessionIfo()
sessionInfo()
library('rlang')
sessionInfo()
library(shiny); runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
install.packages("rlang", version="0.4.6")
library('rbenchmark')
library(shiny); runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
install.packages("tidyverse")
install.packages("tidyverse")
library(shiny); runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
library('rbenchmark')
library(shiny); runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
library(shiny); runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
install.packages("C:/Users/rwaldhei/Downloads/rlang_0.4.10.tar.gz", repos = NULL, type = "source")
uninstall.package('rlang')
uninstall.packages('rlang')
remove.packages('rlang')
install.packages("C:/Users/rwaldhei/Downloads/rlang_0.4.10.tar.gz", repos = NULL, type = "source")
library(shiny); runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
install.packages("installr")
library(installr)
updateR()
library(shiny); runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
library('shinyjs')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
list.dirs()
list.dirs(path = ".", full.names = TRUE, recursive = TRUE)
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
base_names
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
data$data
data
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
data
data$data$sheet
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
data
raw_data
raw_data$sheet
data$sheet
data <<- data[raw_data$sheet %in% data$sheet]
data
data[raw_data$sheet %in% data$sheet]
data[intersect(raw_data$sheet, data$sheet)]
intersect(raw_data$sheet, data$sheet)
new_rows <- intersect(raw_data$sheet, data$sheet)
data[data$sheet %in% new_rows]
data%sheet %in% new_rows
data$sheet %in% new_rows
data[which(data$sheet %in% new_rows),]
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
profvis::profvis({      # Modal for completed analysis
shinyalert("Analysis Complete!", paste("All your data are now in ", dirLocation(), "/", input$dirName, sep = ""),
type ="success", showConfirmButton = TRUE, showCancelButton = TRUE, confirmButtonText = "Generate Origin File", cancelButtonText = "Continue",
callbackR = function(x) {
if (x) {
export_to_origin()
}
}
)})
profvis::profvis({      # Sets up a progress bar in which to estimate how long the execution of the code will take
progress <- Progress$new(session, min = 0, max = nrow(data))
progress$set(message ="Plugging and chugging...\n", detail ="Starting up...")
# Closes all graphics devices that may be lingering (prevents an excess from opening and slowing down the analysis)
while (dev.cur() != 1) {
dev.off()
}
# Resets the variables for the graph builder so new results are concatenated to old ones
numCycles <<- data.frame()
dQdVData <<- data.frame()
total <<- data.frame()
cycle_facts <<- data.frame()
# Disable all input fields to prevent errors occurring from changing values
disable("files")
disable("lowV")
disable("highV")
disable("dirLocation()")
disable("submit")
disable("excelImport")
disable("gGraphs")
disable("peakFit")
disable("area")
disable("perActive")
disable("capActive")
# Creates the directory in which all data will be stored
dir.create(paste(dirLocation(), input$dirName, sep = "/"))
# Update the status once all set-up functions are complete
progress$set(detail ="Starting first cell...")
# ######
#
# The bulk of the analysis occurs within the loop. Each iteratin of the loop corresponds to a cell.
#
# ######
for (row in 1:nrow(data)) {
# ######
#
# This is where all code that should be executed on a"per cell" basis, to prepare for analysis
#
# ######
# Import the excel sheet corresponding to cell of interest
tmp_excel <- read_excel(toString(data$datapath[row]), toString(data$sheet[row]))
# Create an nested directory for all the data and, if applicable, then further folders for graphs of interest
dir.create(paste(dirLocation(), "/",  input$dirName, data$sheet[row], sep ="/"))
if (is.element("dQdV Graphs", input$gGraphs)) dir.create(paste(dirLocation(), input$dirName, data$sheet[row],"dQdV Plots", sep ="/"))
if (is.element("Voltage Profiles", input$gGraphs)) dir.create(paste(dirLocation(), input$dirName, data$sheet[row],"Voltage Profiles", sep ="/"))
if (is.element("Voltage vs. Time", input$gGraphs)) dir.create(paste(dirLocation(), input$dirName, data$sheet[row],"Voltage v Time", sep ="/"))
# Check if masses have been imported, if they have not then all future calculations will be done on a raw capacity basis
if (sum(data$Mass) != 0) {
ylabel <-"Capacity (mAh/g)"
tmp_excel$Q.d <- as.numeric(tmp_excel$`Discharge_Capacity(Ah)` * (1000 / data$Mass[row]))
tmp_excel$Q.c <- as.numeric(tmp_excel$`Charge_Capacity(Ah)`* (1000 / data$Mass[row]))
tmp_excel$CC <- tmp_excel$Q.d - tmp_excel$Q.c
tmp_excel$CE <- (tmp_excel$Q.d / tmp_excel$Q.c) * 100
} else {
ylabel <-"Capacity (Ah)"
tmp_excel$CC <- tmp_excel$`Discharge_Capacity(Ah)` - tmp_excel$`Charge_Capacity(Ah)`
tmp_excel$CE <- (tmp_excel$`Discharge_Capacity(Ah)` / tmp_excel$`Charge_Capacity(Ah)`) * 100
}
tmp_excel$Cell <- row
tmp_excel$CE[is.infinite(tmp_excel$CE)|is.nan(tmp_excel$CE)|tmp_excel$CE > 200] <- 0;
# ######
#
# This loop iterates through each cycle of the cell.
#
# ######
cycles <- split(tmp_excel, tmp_excel$Cycle_Index)
prev_c <- 0
lastCC <- 0
ch_dch <- TRUE
durations <- vector(length = 4)
caps <- vector(length = 4)
prev <- TRUE
dchV <- 0
chV <- 0
i <- 1
for (cycle in cycles) {
# ######
#
# Within each cycle, take out the individual steps. These include the charge, discharge, and others.
#
# ######
progress$set(detail = paste("Analyzing cell", row,", cycle", i))
steps <- split(cycle, cycle$Step_Index)
n <- 1
for (step in steps) {
# ######
#
# Isolation of the charge and discharge cycles. The algorithm is as follows:
#
# If the change in voltage for the step is greater than 0.5V, it is a charge or dicharge cycle. Then, the direction (sign) of the current determines
# if it is charge or discharge (positive current = charge step, negative current is a discharge cycle).
#
# ######
if (abs(tail(step$'Voltage(V)',1) - step$'Voltage(V)'[[1]]) > 0.5) {
# ######
#
# All code that should be executed for every charge/discharge cycles should be written here.
#
# ######
lastCC <- n
if (step$'Current(A)'[[1]] > 0) {
chV <- (1 / (tail(step$`Charge_Capacity(Ah)`,1) - step$`Charge_Capacity(Ah)`[[1]])) * trapz(step$`Charge_Capacity(Ah)`, step$`Voltage(V)`)
dQCdV <- diff(step$`Charge_Capacity(Ah)`)/diff(step$`Voltage(V)`)
dQdVData <<- rbind(dQdVData, data.frame(cycle=rep(i, length(dQCdV)+1), cell = rep(row, length(dQCdV)+1), c_d=rep(0, length(dQCdV)+1), voltage=step$`Voltage(V)`, dQdV=c(0, dQCdV), F_L=rep(0,length(dQCdV)+1)))
durations[1] <- tail(step$'Test_Time(s)', 1) - step$'Test_Time(s)'[[1]]
caps[1] <- tail(step$'Charge_Capacity(Ah)', 1) - step$'Charge_Capacity(Ah)'[[1]]
ch_dch <- TRUE
} else {
dchV <- (1 / (tail(step$`Discharge_Capacity(Ah)`,1) - step$`Discharge_Capacity(Ah)`[[1]])) * trapz(step$`Discharge_Capacity(Ah)`, step$`Voltage(V)`)
dQDdV <- diff(step$`Discharge_Capacity(Ah)`)/diff(step$`Voltage(V)`)
durations[3] <- tail(step$'Test_Time(s)', 1) - step$'Test_Time(s)'[[1]]
caps[3] <- tail(step$'Discharge_Capacity(Ah)', 1) - step$'Discharge_Capacity(Ah)'[[1]]
ch_dch <- FALSE
if (abs(prev_c - step$`Current(A)`[[1]]) > 0.0005) {
dQdVData <<- rbind(dQdVData, data.frame(cycle=rep(i, length(dQDdV)+1), cell = rep(row, length(dQDdV)+1), c_d=rep(1, length(dQDdV)+1), voltage=step$`Voltage(V)`, dQdV=c(0, dQDdV), F_L=rep(1,length(dQDdV)+1)))
prev_c = step$`Current(A)`[[1]]
} else {
dQdVData <<- rbind(dQdVData, data.frame(cycle=rep(i, length(dQDdV)+1), cell = rep(row, length(dQDdV)+1), c_d=rep(1, length(dQDdV)+1), voltage=step$`Voltage(V)`, dQdV=c(0, dQDdV), F_L=rep(0, length(dQDdV)+1)))
}
}
} else if (n - lastCC == 1 & abs(tail(step$'Voltage(V)',1) - step$'Voltage(V)'[[1]]) < 0.001) {
if (step$'Current(A)'[[1]] > 0) {
durations[2] <- tail(step$'Test_Time(s)', 1) - step$'Test_Time(s)'[[1]]
caps[2] <- tail(step$'Charge_Capacity(Ah)', 1) - step$'Charge_Capacity(Ah)'[[1]]
} else {
durations[4] <- tail(step$'Test_Time(s)', 1) - step$'Test_Time(s)'[[1]]
caps[4] <- tail(step$'Discharge_Capacity(Ah)', 1) - step$'Discharge_Capacity(Ah)'[[1]]
}
}
ch_dch <- FALSE
n <- n + 1
}
# ######
#
# Code meant to be run on data"per cycle" should be written here
#
# ######
dQdVData <<- dQdVData[is.finite(dQdVData$voltage),]
dQdVData <<- dQdVData[is.finite(dQdVData$dQdV),]
if (sum(data$Mass) != 0) {
DCap <- tail(cycle$Q.d, 1)
CCap <- tail(cycle$Q.c, 1)
} else {
DCap <- tail(cycle$`Discharge_Capacity(Ah)`, 1)
CCap <- tail(cycle$`Charge_Capacity(Ah)`, 1)
}
timeCVFracCh <- durations[1] / (durations[1] + durations[2])
timeCVFracDch <- durations[3] / (durations[3] + durations[4])
capCVFracCh <- caps[1] / (caps[1] + caps[2])
capCVFracDch <- caps[3] / (caps[3] + caps[4])
# Record charge and discharge voltage, then calculate the delta and average voltage
cycle_facts <<- rbind(cycle_facts, data.frame(cycle=i, cell=row, chV=chV, dchV=dchV, avgV=(dchV + chV) / 2,
dV=chV-dchV, DCap = DCap, CCap = CCap, CE = (CCap / DCap) * 100, lostCap = CCap - DCap, cellFade = if (i == 1) 0 else {DCap - tail(cycle_facts$DCap, 1)},
cycleTime = tail(cycle$`Test_Time(s)`, 1) - cycle$`Test_Time(s)`[[1]], timeCVFracCh = timeCVFracCh, timeCVFracDch = timeCVFracDch,
capCVFracCh = capCVFracCh, capCVRatioDch = capCVFracDch))
i <- i + 1
}
# ######
#
# Code meant to be run on data"per cell" should be written here
#
# ######
cell_data <- cycle_facts[cycle_facts$cell == row,]
# Discharge capacity plotting, with coulombic efficiency being plotted alongside
if (is.element("Discharge Capacity", input$gGraphs)) {
png(paste(dirLocation(), "/",  input$dirName,"/", data$sheet[row],"/", data$sheet[row]," Discharge Capacity Plot.png", sep =""))
eol <- cell_data$`DCap`[[1]] * 0.8
plot(cell_data$cycle, cell_data$DCap, type ="p", main=paste("Discharge Capacity for",  input$dirName), xlab=NA, ylab=paste("Discharge",  ylabel), mai=c(1,1,1,1))
abline(h=eol, lty ="dotted")
par(new = T)
plot(cell_data$cycle, cell_data$CE, type ="p", axes=F, col ="red", ylab=NA, xlab="Cycle", ylim = c(0, 105))
mtext(side = 4, line = 3,"Coulombic Efficiency (%)", col = "red")
axis(side = 4, col ="red", col.axis = "red")
dev.off()
}
# Discharge areal capacity plotting, with coulombic efficiency being plotted alongside
if (is.element("Discharge Areal Capacity", input$gGraphs)) {
png(paste(dirLocation(), "/",  input$dirName,"/", data$sheet[row],"/", data$sheet[row]," Discharge Areal Capacity Plot.png", sep =""))
new_par <- old_par <- par("mar")
new_par[4] <- old_par[2]
par(mar = new_par)
eol <- ((cell_data$DCap[[1]] * 1000) / data$area[row]) * 0.8
plot(cell_data$cycle, ((cell_data$DCap * 1000) / data$area[row]), type ="p", main=paste("Discharge Areal Capacity for",  input$dirName), xlab=NA, ylab="Discharge Capacity (mAh/cm^2)", mai = c(1,1,1,2))
abline(h=eol, lty ="dotted")
par(new = T)
plot(cell_data$cycle, cell_data$CE, type ="p", axes=F, col ="red", ylab=NA, xlab="Cycle", ylim = c(0, 105))
mtext(side = 4, line = 3,"Coulombic Efficiency (%)", col = "red")
axis(side = 4, col ="red", col.axis = "red")
dev.off()
}
# Average voltage plotting
if (is.element("Average Voltage", input$gGraphs)) {
png(paste(dirLocation(), "/",  input$dirName,"/", data$sheet[row],"/", data$sheet[row]," Average Voltage Plot.png", sep =""))
plot(cell_data$cycle, cell_data$chV, col="blue", main=paste("Average Voltage Plot for",  input$dirname, data$sheet[row]), xlab="Cycle", ylab="Voltage (V)", ylim=c(min(cell_data[,2:4]), max(cell_data[,2:4])))
points(cell_data$cycle, cell_data$dchV, col="red", main=paste("Average Voltage Plot for",  input$dirName, data$sheet[row]), xlab="Cycle", ylab="Voltage (V)")
points(cell_data$cycle, cell_data$avgV, col="black", main=paste("Average Voltage Plot for",  input$dirName, data$sheet[row]), xlab="Cycle", ylab="Voltage (V)")
legend("bottomright", c("Charge Voltage","Discharge Voltage","Average Voltage"), col=c("blue","red","black"), pch=19)
dev.off()
}
# Delta voltage plotting
if (is.element("Delta Voltage", input$gGraphs)) {
png(paste(dirLocation(), "/",  input$dirName,"/", data$sheet[row],"/", data$sheet[row]," Delta Voltage Plot.png", sep =""))
plot(cell_data$cycle, cell_data$dV, main=paste("Delta Voltage Plot for",  input$dirName, data$sheet[row]), xlab="Cycle", ylab="Voltage (V)", ylim =c(0, 0.5))
dev.off()
}
# Capacity Loss plotting
if (is.element("Capacity Loss", input$gGraphs)) {
png(paste(dirLocation(), "/",  input$dirName,"/", data$sheet[row],"/", data$sheet[row]," Capacity Loss Plot.png", sep =""))
plot(cell_data$cycle, cell_data$lostCap, main=paste("Capacity Loss Plot for",  input$dirName, data$sheet[row]), xlab="Cycle", ylab= ylabel, ylim = c(mean(cell_data$lostCap) + (2* sd(cell_data$lostCap)), mean(cell_data$lostCap) - (1.5* sd(cell_data$lostCap))))
abline(h=median(cell_data$lostCap), lty="dotted")
dev.off()
}
if (is.element("dQdV Plots", input$gAnim)) {
dQdVplot <- function(){
tmp_data <- dQdVData[dQdVData$cell == row,]
first_cycle <- dQdVData[dQdVData$cell == row & dQdVData$cycle == 2,]
datalist <- split(tmp_data, tmp_data$cycle)
lapply(datalist, function(plotData){
p <- plot(plotData$voltage, plotData$dQdV, main=paste("dQdV Plot for",  input$dirName, data$sheet[row], "Cycle", plotData$cycle[[1]]), xlab="Voltage (V)", ylab= "dQdV (Ah/V)",
xlim = c(min(tmp_data$voltage), max(tmp_data$voltage)), ylim = c(min(tmp_data$dQdV), max(tmp_data$dQdV))) +
points(first_cycle$voltage, first_cycle$dQdV, col = rgb(red = 1, green = 0, blue = 0, alpha = 0.5))
})
}
save_gif(dQdVplot(), paste(dirLocation(), input$dirName, data$sheet[row], "dQdV Animation.gif", sep = "/"), delay = 0.2)
}
if (is.element("Voltage Profiles", input$gAnim)) {
vpPlot <- function(){
first_cycle <- tmp_excel[tmp_excel$`Cycle_Index` == 2,]
datalist <- split(tmp_excel, tmp_excel$`Cycle_Index`)
lapply(datalist, function(plotData){
p <- plot(plotData$CC, plotData$`Voltage(V)`, main=paste("Voltage Profile for",  input$dirName, data$sheet[row], "Cycle", plotData$`Cycle_Index`[[1]]), xlab=ylabel, ylab= "Voltage (V)",
xlim = c(min(tmp_excel$CC), max(tmp_excel$CC)), ylim = c(min(tmp_excel$`Voltage(V)`), max(tmp_excel$`Voltage(V)`))) +
points(first_cycle$CC, first_cycle$`Voltage(V)`, col = rgb(red = 1, green = 0, blue = 0, alpha = 0.5))
})
}
save_gif(vpPlot(), paste(dirLocation(), input$dirName, data$sheet[row], "Voltage Profile Animation.gif", sep = "/"), delay = 0.2)
}
# Save all data within the cell's directory
write.csv(tmp_excel, file = paste(dirLocation(), "/",  input$dirName,"/", data$sheet[row],"/", data$sheet[row],".csv", sep =""))
write.csv(dQdVData, file = paste(dirLocation(), "/",  input$dirName,"/", data$sheet[row],"/", data$sheet[row]," dQdV Data.csv", sep =""))
# Append summation data to the larger datasets to be worked with later
final <- rbind(final, tmp_excel)
numCycles <<- rbind(numCycles, data.frame(sheet=data$sheet[row], cycles=nrow(cell_data)))
# Update progress bar
progress$set(value = row, detail = paste("Finished", row," of", nrow(data)," cells."))
}
# ######
#
# Code meant to be run on all data of all cells should be written here.
#
# ######
# With iterations complete, final calculations are being worked
progress$set(detail ="Wrapping up...")
# Get the last status of each cycle for each cell (namely capacity)
DCap <- cycle_facts[c("cycle","DCap")] %>% group_by(cycle) %>% summarise_each(mean)
CE <- cycle_facts[c("cycle","CE")] %>% group_by(cycle) %>% summarise_each(mean)
capSEs <- cycle_facts[c("cycle","DCap")] %>% group_by(cycle) %>% summarise_each(se)
ceSEs <- cycle_facts[c("cycle","CE")] %>% group_by(cycle) %>% summarise_each(se)
stats <- data.frame(cbind(cycle = capSEs$cycle, DCap = DCap$DCap, CE = CE$CE, capSE = capSEs$DCap, ceSE = ceSEs$CE))
# Send all the data to a global variable to be used elsewhere
total <<- final
tryCatch({
# Total dishcharge capacity plotting
if (is.element("Total Discharge Capacity", input$gGraphs)) {
png(paste(dirLocation(), "/",  input$dirName,"/", "Total Discharge Capacity Plot.png", sep =""))
eol <- max(stats$DCap) * 0.8
plot(stats$cycle, stats$DCap, type ="p", main=paste("Discharge Capacity for",  input$dirName), xlab=NA, ylab=paste("Discharge", ylabel), mai=c(1,1,1,1))
arrows(stats$cycle, stats$DCap - stats$capSE, stats$cycle, stats$DCap + stats$capSE, length=0.05, angle=90, code=3)
abline(h=eol, lty ="dotted")
par(new = T)
plot(stats$cycle, stats$CE, type ="p", axes=F, col ="red", ylab=NA, xlab="Cycle", ylim = c(0, 105))
arrows(stats$cycle, stats$CE - stats$ceSE, stats$cycle, stats$CE + stats$ceSE, length=0.05, angle=90, code=3, col ="red")
axis(side = 4, col ="red")
mtext(side = 4, line = 2,"Coulombic Efficiency (%)")
dev.off()
}
}, error = function(cond) {
print(cond)
})
# Save total data and stats
write.csv(stats, file = paste(dirLocation(), "/",  input$dirName,"/", basename(dirLocation())," Summary.csv", sep =""))
write.csv(cycle_facts, file = paste(dirLocation(), "/",  input$dirName,"/", basename(dirLocation())," Cycle Facts.csv", sep =""))
# If a histor directory does not exist, create it. Save all the data revelant to plotting to a RData file.
if (!dir.exists(paste(dirLocation(), "history", sep = "/"))) {
dir.create(paste(dirLocation(), "history", sep = "/"))
}
dirName <<- input$dirName
save(dirLocation, dirName, data, dQdVData, total, cycle_facts, numCycles, file = paste(dirLocation(), "/history/", input$dirName, ".RData", sep = ""))
# Modal for completed analysis
shinyalert("Analysis Complete!", paste("All your data are now in ", dirLocation(), "/", input$dirName, sep = ""),
type ="success", showConfirmButton = TRUE, showCancelButton = TRUE, confirmButtonText = "Generate Origin File", cancelButtonText = "Continue",
callbackR = function(x) {
if (x) {
export_to_origin()
}
}
)
# Finish progress bar
progress$set(value = nrow(data))
# Re-enable all input fields, including graph builder
enable("files")
enable("lowV")
enable("highV")
enable("dirLocation()")
enable("submit")
enable("excelImport")
enable("gGraphs")
enable("peakFit")
enable("area")
enable("perActive")
enable("capActive")
enable("graphBuilder")
# Close progress bar
progress$close()})
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
library(shiny); runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
view(data)
View(raw_data)
View(data)_
View(data)
View(data)
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
View(tmp_excel)
View(tmp_excel)
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
View(step)
tail(step$'Test_Time(s)', 1)
step$'Test_Time(s)'[[1]]
tail(step$'Test_Time(s)', 1) - step$'Test_Time(s)'[[1]]
install.packages("lubridate")
library(lubridate)
period_to_seconds(tail(step$'Test_Time(s)', 1)) - period_to_seconds(step$'Test_Time(s)'[[1]])
library(shiny); runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
library(shiny); runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
library(shiny); runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
library(shiny); runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
runApp('C:/Users/rwaldhei/Documents/ecdpt/arbinimport.R')
devtools::uninstall('echemAnalyst')
setwd("C:/Users/rwaldhei/Documents/ecdpt")
devtools::create('echemAnalyst')
library(shiny); runApp('arbinimport.R')
